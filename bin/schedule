#!/bin/bash
if ! [ -f ~/.schedule/schcurrpid ]; then
	echo $BASHPID > ~/.schedule/schcurrpid
else
	read peed < ~/.schedule/schcurrpid
	zenity --error --text="<span font='12'>Another Instance Is Currently Running\n\nPID: $peed</span>" --width=400 2>/dev/null
	exit 1
fi
icon_trigger=0
config=~/.schedule/schedule.conf
arg=$1
if ! [ -f "$config" ]; then
	touch $config
fi

sanitize_todo(){
	green=1
	t_line=`wc -l < "$config"`
	line=0
	while read -r sanitize || [[ -n "$sanitize" ]]; do
		line=$((line+1))
		sentinel=0
		IFS="|"; for i in $sanitize; do
			if [ "$i" == "" ] || [ "$i" == "Click That Icon Over There ->" ]; then
				sentinel=$((sentinel+1))
			fi
			[ "$sentinel" != "4" ] || {
				sed -i ''$line'd' $config
				green=0
				break
			}
		done
		if [ $green -eq 0 ]; then
			sanitize_todo
		fi
	done < "$config"
}
	export -f sanitize_todo

add_todo(){
	r=2
	while [ $r -eq 2 ]; do
	z=$((($RANDOM%5000)+1))
	x=`yad --center --form --title="Add Dialog" --field="Course Title" --field="Course Code" --field="Units" --field="Date:DT" "" "" "" "Click That Icon Over There ->" --date-format='%A %d %Y' --button="gtk-cancel:1" --button="Add Another!gtk-add:2" --button="gtk-ok:0" --width=400 2>/dev/null`
	r=$?
	[ $r -eq 2 -o $r -eq 0 ] || break
	x=`sed 's/.*/&'$z'/g' <<<$x`
	echo "$x" >> "$config"
done
	sanitize_todo
	list_todo
}
	export -f add_todo

list_todo(){
	x=()
	ln=1
	declare -i b=0
	declare -i c=4
	while read -r todo || [[ -n "$todo" ]]; do
		x+=($ln)
		ln=$((ln+1))
		IFS="|"; for i in $todo; do
			b+=1
			if [ "$i" == "" ]||( [ $b -eq $c ] && [[ ! $i =~ Mon|Tue|Wed|Thu|Fri|Sat|Sun ]]); then
				i="-";
			fi
			x+=($i)
		done
		c+=5
	done < "$config"
		if [ "$ln" == "1" ]; then
	yad --center --text="Your To-Do List Is Spick Span\n\nWould You Like To Add A Task?" --title="Empty" --button="Yes:1" --button="No:0" --width=400 2>/dev/null
	ch=$?
	if [ "$ch" == "1" ]; then
		add_todo
	fi
	rm ~/.schedule/schcurrpid
	exit 0
fi
	yad --list --center --title="TO-DO" --text="Here Are Your Stuff To-Do" --column="S/N" --column="Course Title" --column="Course Code" --column="Units" --column="Date" --column="ID" ${x[*]}  --hide-column=6 --width=600 --height=600 --no-selection --button="Remove:2" --button="Add:1" --button="Ok:0" >/dev/null 2>&1
	ch=$?
		if [ $ch -eq 1 ]; then
			add_todo
		elif [ $ch -eq 2 ]; then
			remove_todo
		else
			if [ "$icon_trigger" == "0" ]; then
				icon_trigger=1
			yad --image dialog-alert --center --title="Tray Notif" --text="The Schedule App Will Continue In The App Tray" --button="gtk-ok" --width=380 2>/dev/null
			icon_tray
		fi
		fi
}
export -f list_todo

remove_todo(){
	x=()
	ln=1
	declare -i b=0
	declare -i c=4
	while read -r todo || [[ -n "$todo" ]]; do
		x+=(false)
		x+=($ln)
		ln=$((ln+1))
		IFS="|"; for i in $todo; do
			b+=1
			if [ "$i" == "" ]||( [ $b -eq $c ] && [[ ! $i =~ Mon|Tue|Wed|Thu|Fri|Sat|Sun ]]); then
				i="-";
			fi
			x+=($i)
		done
		c+=5
	done < "$config"
		if [ "$ln" == "1" ]; then
	yad --center --text="Your To-Do List Is Spick Span\n\nWould You Like To Add A Task?" --title="Empty" --button="Yes:1" --button="No:0" --width=400 2>/dev/null
	ch=$?
	if [ "$ch" == "1" ]; then
		add_todo
	fi
	rm ~/.schedule/schcurrpid
	exit 0
fi
tr=`yad --center --list --checklist --title="TO-DO" --text="Choose Which To Remove" --column="Selection" --column="S/N" --column="Course Title" --column="Course Code" --column="Units" --column="Date" --column="ID" ${x[*]} --width=700 --print-column=7 --hide-column=7 --no-selection --height=600 2>/dev/null | tr '\n' '|' | sed 's/|//'`
[ $? -eq 0 ] || list_todo
	IFS='|'; for i in $tr; do
	[ "$i" != "" ] || continue
		i=`grep -n $i $config | sed 's/:.*//'`
		sed -i ''$i'd' $config
	done
	list_todo
}
export -f remove_todo

icon_tray(){
	export fifo=$(mktemp -u --tmpdir schedule.XXXXXXXX)
	mkfifo "$fifo"

	trap "rm -f $fifo" exit

	qweet(){
		rm ~/.schedule/schcurrpid
		kill $(ps -ax | grep yad | sed 2d | sed 's/[[:space:]]//g' | sed 's/pts.*//' | sed 's/\?.*//')
		
	}
	export -f qweet

	explicit_remove(){
		config=~/.schedule/schedule.conf
		remove_todo
	}
	export -f explicit_remove

	explicit_add(){
		config=~/.schedule/schedule.conf
		add_todo
	}
	export -f explicit_add

	click_act(){
		config=~/.schedule/schedule.conf
		list_todo
	}
	export -f click_act

	menu_options(){
		echo "icon:scheduler"
		echo "menu:Add Todo!bash -c explicit_add!gtk-add||List Todo!bash -c click_act!gtk-yes||Remove Todo!bash -c explicit_remove!gtk-remove||Quit!bash -c qweet!gtk-quit"
		echo "tooltip:Schedule"
	}
	exec 3<>$fifo
	yad --notification --command="bash -c click_act" --listen <&3 2>/dev/null & menu_options >&3 2>/dev/null
	exec 3>&-
}
if [ "$arg" == "--list" -o "$arg" == "-l" -o "$arg" == "" ]; then
	list_todo
elif [ "$arg" == "--remove" -o "$arg" == "-r" ]; then
	remove_todo
elif [ "$arg" == "--uninstall" -o "$arg" == "-u" ]; then
	exec /usr/share/Scheduler/uninstaller
	exit 0
fi